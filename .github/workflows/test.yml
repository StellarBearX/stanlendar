name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DATABASE_URL: 'postgresql://postgres:test@localhost:5432/test'
  REDIS_URL: 'redis://localhost:6379/1'
  JWT_SECRET: 'test-jwt-secret-for-ci'
  ENCRYPTION_KEY: 'test-encryption-key-32-bytes-long'
  GOOGLE_CLIENT_ID: 'test-google-client-id'
  GOOGLE_CLIENT_SECRET: 'test-google-client-secret'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API unit tests
        run: |
          cd apps/api
          npm run test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: Run Web unit tests
        run: |
          cd apps/web
          npm run test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: Upload API coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage/lcov.info
          flags: api
          name: api-coverage

      - name: Upload Web coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage

      - name: Check coverage thresholds
        run: |
          cd apps/api
          npm run test -- --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}' --watchAll=false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: |
          cd apps/api
          npm run db:migrate
        env:
          NODE_ENV: test

      - name: Run API integration tests
        run: |
          cd apps/api
          npm run test:e2e
        env:
          NODE_ENV: test

      - name: Run performance tests
        run: |
          cd apps/api
          npm run test -- --testNamePattern="Performance" --watchAll=false
        env:
          NODE_ENV: test

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: |
          cd apps/web
          npx playwright install --with-deps

      - name: Build applications
        run: |
          cd apps/api
          npm run build
          cd ../web
          npm run build

      - name: Run database migrations
        run: |
          cd apps/api
          npm run db:migrate
        env:
          NODE_ENV: test

      - name: Start API server
        run: |
          cd apps/api
          npm run start:prod &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3001

      - name: Start Web server
        run: |
          cd apps/web
          npm run start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3000
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: Run E2E tests
        run: |
          cd apps/web
          npm run test:e2e
        env:
          NODE_ENV: test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run API security tests
        run: |
          cd apps/api
          npm run test -- --testNamePattern="security|Security" --watchAll=false

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          cd apps/api
          npm run lint
          cd ../web
          npm run lint

      - name: Check TypeScript
        run: |
          cd apps/api
          npm run type-check
          cd ../web
          npm run type-check

      - name: Check formatting
        run: |
          cd apps/api
          npm run format -- --check
          cd ../web
          npm run format -- --check

  build-test:
    name: Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build API
        run: |
          cd apps/api
          npm run build

      - name: Build Web
        run: |
          cd apps/web
          npm run build

      - name: Check bundle size
        run: |
          cd apps/web
          npm run analyze

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests, lint-and-format, build-test]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          
          if [[ "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.integration-tests.result }}" != "success" || 
                "${{ needs.e2e-tests.result }}" != "success" || 
                "${{ needs.security-tests.result }}" != "success" || 
                "${{ needs.lint-and-format.result }}" != "success" || 
                "${{ needs.build-test.result }}" != "success" ]]; then
            echo "‚ùå Some tests failed"
            exit 1
          else
            echo "‚úÖ All tests passed"
          fi

      - name: Post test summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              'Unit Tests': '${{ needs.unit-tests.result }}',
              'Integration Tests': '${{ needs.integration-tests.result }}',
              'E2E Tests': '${{ needs.e2e-tests.result }}',
              'Security Tests': '${{ needs.security-tests.result }}',
              'Lint and Format': '${{ needs.lint-and-format.result }}',
              'Build Test': '${{ needs.build-test.result }}'
            };
            
            let summary = '## üß™ Test Results\n\n';
            for (const [test, result] of Object.entries(results)) {
              const icon = result === 'success' ? '‚úÖ' : '‚ùå';
              summary += `${icon} **${test}**: ${result}\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });